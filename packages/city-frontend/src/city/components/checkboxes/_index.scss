@import "../error-message/index";
@import "../fieldset/index";
@import "../hint/index";
@import "../label/index";

@include city-exports("city/component/checkboxes") {
  $city-touch-target-gutter: 4px;
  $city-checkboxes-size: 40px;
  $city-touch-target-size: ($city-checkboxes-size + $city-touch-target-gutter);
  $city-small-checkboxes-size: 24px;
  $city-checkboxes-label-padding-left-right: city-spacing(3);
  $city-checkbox-check-horizontal-position: 10px;

  .city-checkboxes__item {
    display: flex;
    flex-wrap: wrap;
    position: relative;
    margin-bottom: city-spacing(2);
  }

  .city-checkboxes__item:last-child,
  .city-checkboxes__item:last-of-type {
    margin-bottom: 0;
  }

  .city-checkboxes__input {
    // Allow the input to sit above the label, enabling its proper detection
    // when exploring by touch or using automation tools like Selenium
    z-index: 1;
    width: $city-touch-target-size;
    height: $city-touch-target-size;
    margin: 0;
    opacity: 0;
    cursor: pointer;
  }

  .city-checkboxes__label {
    align-self: center;

    // Ensure that the width of the label is never more than the width of the
    // container minus the input width minus the padding on either side of
    // the label. This prevents the label from going onto the next line due to
    // __item using flex-wrap because we want hints on a separate line.
    max-width: calc(100% - #{(($city-checkboxes-label-padding-left-right * 2) + $city-touch-target-size)});
    margin-bottom: 0;
    padding: (city-spacing(1) + $city-border-width-form-element) city-spacing(3);
    cursor: pointer;
    // remove 300ms pause on mobile
    touch-action: manipulation;
  }

  // [ ] Check box
  .city-checkboxes__label::before {
    content: "";
    box-sizing: border-box;
    position: absolute;
    top: ($city-touch-target-gutter / 2);
    left: ($city-touch-target-gutter / 2);
    width: $city-checkboxes-size;
    height: $city-checkboxes-size;
    border: $city-border-width-form-element solid currentcolor;
    background: transparent;
  }

  // ✔ Check mark
  //
  // The check mark is a box with a border on the left and bottom side (└──),
  // rotated 45 degrees
  .city-checkboxes__label::after {
    content: "";
    box-sizing: border-box;
    position: absolute;

    // Use "magic numbers" to define shape and position of check mark because
    // the complexity of the shape makes it difficult to calculate dynamically.
    top: 13px;
    left: $city-checkbox-check-horizontal-position;
    width: 23px;
    height: 12px;
    transform: rotate(-45deg);
    border: solid;
    border-width: 0 0 5px 5px;
    // Fix bug in IE11 caused by transform rotate (-45deg).
    // See: alphagov/city_elements/issues/518
    border-top-color: transparent;
    opacity: 0;
    background: transparent;
  }

  .city-checkboxes__hint {
    display: block;
    width: 100%;
    margin-top: city-spacing(-1);
    padding-right: $city-checkboxes-label-padding-left-right;
    padding-left: ($city-checkboxes-label-padding-left-right + $city-touch-target-size);
  }

  // This is to bypass city-hint's specificity on hints following labels having
  // a margin bottom of 10px (city-spacing(2)). Because checkboxes are flexbox,
  // the margin doesn't collapse so we have to do this manually.
  .city-label:not(.city-label--m):not(.city-label--l):not(.city-label--xl) + .city-checkboxes__hint {
    margin-bottom: 0;
  }

  // Focused state
  .city-checkboxes__input:focus + .city-checkboxes__label::before {
    border-width: 4px;

    // When colours are overridden, the yellow box-shadow becomes invisible
    // which means the focus state is less obvious. By adding a transparent
    // outline, which becomes solid (text-coloured) in that context, we ensure
    // the focus remains clearly visible.
    outline: $city-focus-width solid transparent;
    outline-offset: 1px;

    // When in an explicit forced-color mode, we can use the Highlight system
    // color for the outline to better match focus states of native controls
    @media screen and (forced-colors: active), (-ms-high-contrast: active) {
      outline-color: Highlight;
    }

    box-shadow: 0 0 0 $city-focus-width $city-focus-colour;
  }

  // Selected state
  .city-checkboxes__input:checked + .city-checkboxes__label::after {
    opacity: 1;
  }

  // Disabled state
  .city-checkboxes__input:disabled,
  .city-checkboxes__input:disabled + .city-checkboxes__label {
    cursor: not-allowed;
  }

  .city-checkboxes__input:disabled + .city-checkboxes__label,
  .city-checkboxes__input:disabled ~ .city-hint {
    opacity: 0.5;
  }

  // =========================================================
  // Dividers ('or')
  // =========================================================

  .city-checkboxes__divider {
    @include city-font($size: 19);
    @include city-text-colour;
    $city-divider-size: $city-checkboxes-size !default;
    width: $city-divider-size;
    margin-bottom: city-spacing(2);
    text-align: center;
  }

  // =========================================================
  // Conditional reveals
  // =========================================================

  // The narrow border is used in the conditional reveals because the border has
  // to be an even number in order to be centred under the 40px checkbox or radio.
  $conditional-border-width: $city-border-width-narrow;
  // Calculate the amount of padding needed to keep the border centered against the checkbox.
  $conditional-border-padding: ($city-touch-target-size / 2) - ($conditional-border-width / 2);
  // Move the border centered with the checkbox
  $conditional-margin-left: $conditional-border-padding;
  // Move the contents of the conditional inline with the label
  $conditional-padding-left: $conditional-border-padding + $city-checkboxes-label-padding-left-right;

  .city-checkboxes__conditional {
    @include city-responsive-margin(4, "bottom");
    margin-left: $conditional-margin-left;
    padding-left: $conditional-padding-left;
    border-left: $conditional-border-width solid $city-border-colour;

    .city-frontend-supported &--hidden {
      display: none;
    }

    & > :last-child {
      margin-bottom: 0;
    }
  }

  // =========================================================
  // Small checkboxes
  // =========================================================

  .city-checkboxes--small {
    $input-offset: ($city-touch-target-size - $city-small-checkboxes-size) / 2;

    .city-checkboxes__item {
      margin-bottom: 0;
    }

    // Shift the touch target into the left margin so that the visible edge of
    // the control is aligned
    //
    //   ┆What colours do you like?
    //  ┌┆───┐
    //  │┆[] │ Purple
    //  └┆▲──┘
    //  ▲┆└─ Check box pseudo element, aligned with margin
    //  └─── Touch target (invisible input), shifted into the margin
    .city-checkboxes__input {
      margin-left: $input-offset * -1;
    }

    .city-checkboxes__label {
      // Create a tiny space between the small checkbox hover state so that it
      // doesn't clash with the label
      padding-left: 1px;
    }

    // [ ] Check box
    //
    // Reduce the size of the check box [1], vertically center it within the
    // touch target [2]
    // Left here is 0 because we've shifted the input into the left margin
    .city-checkboxes__label::before {
      top: $input-offset; // 2
      left: 0;
      width: $city-small-checkboxes-size; // 1
      height: $city-small-checkboxes-size; // 1
    }

    // ✔ Check mark
    //
    // Reduce the size of the check mark and re-align within the checkbox
    .city-checkboxes__label::after {
      top: 17px;

      // Horizontal position is just the normal sized left value accounting for
      // the new width of the smaller checkbox
      left: (16px - $city-checkbox-check-horizontal-position);
      width: 12px;
      height: 6.5px;
      border-width: 0 0 3px 3px;
    }

    // Fix position of hint with small checkboxes
    //
    // Do not use hints with small checkboxes – because they're within the input
    // wrapper they trigger the hover state, but clicking them doesn't actually
    // activate the control.
    //
    // (If you do use them, they won't look completely broken... but seriously,
    // don't use them)
    .city-checkboxes__hint {
      padding-left: ($city-small-checkboxes-size + $input-offset);
    }

    // Align conditional reveals with small checkboxes
    .city-checkboxes__conditional {
      $margin-left: ($city-small-checkboxes-size / 2) - ($conditional-border-width / 2);
      margin-left: $margin-left;
      padding-left: ($city-touch-target-size - $input-offset) - ($margin-left + $conditional-border-width);
    }

    .city-checkboxes__divider {
      width: $city-small-checkboxes-size;
      margin-bottom: city-spacing(1);
    }

    // Hover state for small checkboxes.
    //
    // We use a hover state for small checkboxes because the touch target size
    // is so much larger than their visible size, and so we need to provide
    // feedback to the user as to which checkbox they will select when their
    // cursor is outside of the visible area.
    .city-checkboxes__item:hover .city-checkboxes__input:not(:disabled) + .city-checkboxes__label::before {
      // Forced colours modes tend to ignore box-shadow.
      // Apply an outline for those modes to use instead.
      outline: $city-focus-width dashed transparent;
      outline-offset: 1px;
      box-shadow: 0 0 0 $city-hover-width $city-hover-colour;
    }

    // Because we've overridden the border-shadow provided by the focus state,
    // we need to redefine that too.
    //
    // We use two box shadows, one that restores the original focus state [1]
    // and another that then applies the hover state [2].
    .city-checkboxes__item:hover .city-checkboxes__input:focus + .city-checkboxes__label::before {
      // Set different HCM colour when we have both hover/focus applied at once
      @media screen and (forced-colors: active), (-ms-high-contrast: active) {
        outline-color: Highlight;
      }
      // prettier-ignore
      box-shadow:
        0 0 0 $city-focus-width $city-focus-colour, // 1
        0 0 0 $city-hover-width $city-hover-colour; // 2
    }

    // For devices that explicitly don't support hover, don't provide a hover
    // state (e.g. on touch devices like iOS).
    //
    // We can't use `@media (hover: hover)` because we wouldn't get the hover
    // state in browsers that don't support `@media (hover)` (like Internet
    // Explorer) – so we have to 'undo' the hover state instead.
    @media (hover: none), (pointer: coarse) {
      .city-checkboxes__item:hover .city-checkboxes__input:not(:disabled) + .city-checkboxes__label::before {
        box-shadow: initial;
      }

      .city-checkboxes__item:hover .city-checkboxes__input:focus + .city-checkboxes__label::before {
        box-shadow: 0 0 0 $city-focus-width $city-focus-colour;
      }
    }
  }
}
